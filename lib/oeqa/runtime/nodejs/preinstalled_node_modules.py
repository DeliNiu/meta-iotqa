# -*- coding: utf-8 -*-
import os
import shutil
import subprocess
from oeqa.oetest import oeRuntimeTest
from oeqa.utils.decorators import tag

__author__ = 'qiuzhong'


@tag(TestType = 'Functional Positive', FeatureID = 'IOTOS-334')
class PreinstalledNodeModulesTest(oeRuntimeTest):
    '''
    The test case test whether the npm pre-installed modules work well.
    '''

    apprt_test_name = 'nodeplugins'
    files_dir = None
    npm_dir = None
    target_npm_dir = '/tmp/%s' % apprt_test_name

    preinstalled_node_modules = {
        'express-helloworld': 'preinstalled_express_helloworld.js',
        'express-routemethods': 'preinstalled_express_routemethods.js',
        'express-routepaths': 'preinstalled_express_routepaths.js',
        'express-template': 'preinstalled_express_template.js',
        'express-extra': 'views',
        'socketio-helloworld': 'preinstalled_socketio_helloworld.js',
        'socketio-helloworld2': 'preinstalled_socketio_helloworld2.js',
        'mongoose-create': 'preinstalled_mongoose_create.js',
        'mongoose-read': 'preinstalled_mongoose_read.js',
        'mongoose-update': 'preinstalled_mongoose_update.js',
        'mongoose-delete': 'preinstalled_mongoose_delete.js',
        'underscore': 'preinstalled_underscore_intro.js'
    }


    @classmethod
    def all_files_exists(cls):
        '''
        See wether all the files exists.
        :return:
        '''
        for npm_test_file in cls.preinstalled_node_modules.values():
            if not os.path.exists(os.path.join(os.path.dirname(__file__),
                                               'files', cls.apprt_test_name,
                                               npm_test_file)):
                print('%s not exist!' % \
                      os.path.join(os.path.dirname(__file__),
                                               'files', cls.apprt_test_name,
                                               npm_test_file))
                return False
        return True


    @classmethod
    def setUpClass(cls):
        '''
        Copy all the JavaScript files to the target system.
        '''
        # clean all the files that support the tests.
        # Attention: -f option will return 0 even the rm command fails.
        cls.tc.target.run('rm -fr %s' % cls.target_npm_dir)
        cls.tc.target.run('rm -f %s.tar.gz' % cls.target_npm_dir)

        cls.files_dir = os.path.join(os.path.dirname(__file__), 'files')
        cls.npm_dir = os.path.join(os.path.dirname(__file__),
                                    'files', cls.apprt_test_name).rstrip('/')

        if os.path.exists('%s.tar.gz' % cls.npm_dir):
            os.remove('%s.tar.gz' % cls.npm_dir)

        proc = None
        if cls.all_files_exists():
            proc = subprocess.Popen(
                ['tar', '-czf', '%s.tar.gz' % cls.npm_dir, cls.apprt_test_name],
                cwd = cls.files_dir)
            proc.wait()
        else:
            print('There are files not in %s' % cls.npm_dir)

        if proc and proc.returncode == 0 and \
            os.path.exists('%s.tar.gz' % cls.npm_dir):
            cls.tc.target.copy_to(
                os.path.join(
                    os.path.dirname(__file__),
                    'files',
                    '%s.tar.gz' % cls.apprt_test_name),
                '%s.tar.gz' % cls.target_npm_dir)
            cls.tc.target.run('cd /tmp/; ' \
                            'tar -xf %s.tar.gz -C %s/' % (
                                cls.target_npm_dir,
                                os.path.dirname(cls.target_npm_dir))
                            )
        else:
            print('Fail to compress directory %s ' % cls.npm_dir)


    def test_preinstall_express_helloworld(self):
        '''
        Expressjs web framework hello world test.
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['express-helloworld']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertEqual(output, 'Hello World!',
                         msg='Failed to test expressjs framework hello world app!')


    def test_preinstall_express_routemethods(self):
        '''
        Expressjs web framework route method feature test.
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['express-routemethods']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertListEqual(output.split('\n'),
                         ['GET request to the homepage',
                          'POST request to the homepage'],
                         msg='Failed to test expressjs framework route methods feature!')


    def test_preinstall_express_routepaths(self):
        '''
        Expressjs web framework route paths feature test.
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['express-routepaths']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertListEqual(output.split('\n'),
                         ['root', 'about', 'random.text'],
                         msg='Failed to test expressjs framework route paths feature!')


    def test_preinstall_express_template(self):
        '''
        Expressjs web framework template feature test.
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['express-template']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertEqual(output, '<title>Hey</title><h1>Hello there!</h1>',
                         msg='Failed to test expressjs framework template feature!')


    def test_preinstall_socketio_helloworld(self):
        '''
        Socket.io hello world app test
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['socketio-helloworld']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertEqual(output, 'Hello World!',
                         msg='Failed to test socket.io hello world app!')


    def test_preinstall_socketio_helloworld2(self):
        '''
        Socket.io hello world app with HTTP server test
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['socketio-helloworld2']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertEqual(output, 'Hello World!',
                         msg='Failed to test socket.io hello world app that uses HTTP server!')


    def test_preinstall_mongoose_create(self):
        '''
        Mongoose operation test: create
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['mongoose-create']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertTrue(output.endswith('meow'),
                         msg='Failed to test mongoose create operation error!')


    def test_preinstall_mongoose_read(self):
        '''
        Mongoose operation test: read
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['mongoose-read']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertTrue(output.endswith('Tom'),
                         msg='Failed to test mongoose create operation error!')


    def test_preinstall_mongoose_update(self):
        '''
        Mongoose operation test: update
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['mongoose-update']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertTrue(output.endswith('Jerry'),
                         msg='Failed to test mongoose create operation error!')


    def test_preinstall_mongoose_delete(self):
        '''
        Mongoose operation test: delete
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['mongoose-delete']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertTrue(output.endswith('Tom\nDeleted'),
                         msg='Failed to test mongoose create operation error!')


    def test_preinstall_underscore_intro(self):
        '''
        Underscore module test
        '''
        (status, output) = self.target.run(
            'cd %s/; node %s/%s' % (
                self.target_npm_dir,
                self.target_npm_dir,
                self.preinstalled_node_modules['underscore']))
        self.assertEqual(status, 0,
                         msg='Executing test case returns non-zero value!')
        self.assertEqual(output,
                         'barney, fred, pebbles',
                         msg='Failed to test mongoose create operation error!')


    @classmethod
    def tearDownClass(cls):
        '''
        Clean work.
        '''
        # Clean all the files and directories that the tests may be used on
        # target

        if os.path.exists('%s.tar.gz' % cls.npm_dir):
            os.remove('%s.tar.gz' % cls.npm_dir)

        cls.tc.target.run('rm -f %s.tar.gz' % cls.target_npm_dir)
        cls.tc.target.run('rm -fr %s/' % cls.target_npm_dir)
